import os, json, time
import groq

# ‚îÄ‚îÄ‚îÄ PAR√ÄMETRES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
DIRECTORI = "data_exercicis"
CURS = "SQL"  # O el que vulguis: PYTHON, SQL, DAX...
MAX_CAPITOLS = 10

PROMPT_BASE_OLD = """
Ets un professor expert en Data. 
El teu objectiu √©s crear cap√≠tols amb EXACTAMENT 5 exercicis cadascun del curs {curs}, utilitzant codi i f√≥rmules reals.

IMPORTANT:
- Inclou tots els camps del JSON, si cal deixa'ls en null, no en pot faltar cap. Els noms dels camps han de ser exactament els mateixos que els del JSON, no canviis cap ni canviis l'idioma.
- No afegeixis camps diferents al JSON.
- La resposta ha de ser nom√©s el JSON en format diccionari, sense comentaris abans ni despr√©s, per evitar errors en el proc√©s automatitzat.

Els exercicis poden ser de 4 tipus:
- "codi": programaci√≥ curta (1-5 l√≠nies).
- "test": preguntes tipus test amb 4 opcions (indicant la correcta).
- "exe": completar o corregir fragments de codi (nom√©s per Python).
- "IA": exercicis complexos amb respostes llargues o obertes corregides per un LLM.

Instruccions importants:
- Tots els exercicis han de ser resolts amb les dades generades, sense refer√®ncies externes.
- No cal usar eines externes com Excel.
- Fes els enunciats clars, adaptats al nivell indicat (F√†cil, Mitj√†, Avan√ßat).
- Per "test", afegeix 4 opcions amb la correcta.
- Per "IA", proposa casos pr√†ctics o an√†lisis de casos.
- Segueix estrictament l'estructura JSON proporcionada.
- El camp descripci√≥ √©s fonamental per l'explicaci√≥ pedag√≤gica.
"""

PROMPT_BASE = """
Et comparteixo un JSON amb exercicis del curs {curs}. No modifiquis l'estructura ni els exercicis, nom√©s has de fer petits canvis:
Ajusta el camp solucio_codi del JSON tal que: solucio_codi_1 tingui el valor actual de solucio_codi i solucio_codi_2 sigui null.
Tamb√© assegura't que el camp descripcio sigui clar i √∫til per a l'alumne, tai i com es defineix a l'exemple de context.

IMPORTANT:
- Inclou tots els camps del JSON, si cal deixa'ls en null, no en pot faltar cap. Els noms dels camps han de ser exactament els mateixos que els del JSON, no canviis cap ni canviis l'idioma.
- No afegeixis camps diferents al JSON.
- La resposta ha de ser nom√©s el JSON en format diccionari, sense comentaris abans ni despr√©s, per evitar errors en el proc√©s automatitzat.
"""

# ‚îÄ‚îÄ‚îÄ CONTEXT DEL FORMAT JSON ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
context_estructura = r"""
{
  "curs": {
    "nom": "Excel", (pot ser SQL, PYTHON, EXCEL o DAX, segons el que es demani)
    "descripcio": "Apr√®n a dominar Excel des de zero fins a nivell avan√ßat, aplicat a l'an√†lisi de dades.",
    "color_fons": "#F4F8F4"
  },
  "capitol": {
    "titol": "T√≠tol del cap√≠tol",
    "numero": 1,
    "dificultat": "F√†cil",
    "preu": 0.00
  },
  "exercicis": [
    {
      "numero": 1,
      "titol": "T√≠tol de l'exercici",
      "tipus": "codi", (pot ser 'codi' o 'test'. Nom√©s per exercicis del curs Python pot ser 'exe' ja que el codi es pot executar)
      "descripcio": "Explicaci√≥ did√†ctica del concepte, necess√†ria perque l'alumne pugui resoldre l'exercici. Ha de ser completa com l'explicaci√≥ d'un professor sobre un tema.",
      "enunciat": "Enunciat de l'exercici.",
      "solucio": "Resposta correcta a l'exercici, en cas que sigui tipus 'exe' ser√† el resultat esperat del codi",
      "solucio_codi_1": "Codi de la soluci√≥, en tipus test ser√† null i en tipus codi i exe ser√† el codi de la soluci√≥. En cas d'excel, la soluci√≥ en angl√®s, en altres cursos ser√† null",
      "solucio_codi_2": "En cas d'excel, la soluci√≥ en castell√†, en altres cursos ser√† null",
      "solucio_codi_2":null,
      "codi_a_completar":null,
      "temps_estimat_minuts": 5,
      "respostes_test": [],
      "pista_1": "Primera pista. (Una frase)",
      "pista_2": "Segona pista. (Una frase)",
      "imatge_1": null,
      "descripcio_imatge_1": null,
      "imatge_2": null,
      "descripcio_imatge_2": null
    }
  ]
}
"""

# ‚îÄ‚îÄ‚îÄ GROQ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
KEY = os.getenv("GROQ_API_KEY")
client = groq.Groq(api_key=KEY)

def call_llm(prompt: str) -> str:
    try:
        chat = client.chat.completions.create(
            #model="llama-3.3-70b-versatile",
            model="deepseek-r1-distill-llama-70b",
            messages=[{"role": "user", "content": prompt}],
        )
        print( chat.choices[0].message.content.strip())
        return chat.choices[0].message.content.strip()
    except Exception as e:
        print(f"‚ùå Error cridant a l'API: {e}")
        raise SystemExit("Aturant execuci√≥ per error greu.")

# ‚îÄ‚îÄ‚îÄ HELPERS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def bloc_json(text: str) -> str:
    i, j = text.find("{"), text.rfind("}")
    if i == -1 or j == -1 or j <= i:
        raise ValueError("Cap JSON trobat o mal format")
    return text[i:j+1]

# ‚îÄ‚îÄ‚îÄ BUCLE PRINCIPAL ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
for cap in range(1, MAX_CAPITOLS + 1):
    print(f"\n>>> Revisant cap√≠tol {cap}...")

    fitxer_path = os.path.join(DIRECTORI, f"{CURS}_capitol_{cap}.json")
    if not os.path.exists(fitxer_path):
        print(f"Fitxer no trobat: {fitxer_path}, saltant...")
        continue

    with open(fitxer_path, "r", encoding="utf-8") as f:
        json_exercicis = f.read()

    prompt = PROMPT_BASE.format(curs=CURS, json_exercicis=json_exercicis)

    intents = 0
    max_intents = 30
    mentre_no_aconseguit = True

    while mentre_no_aconseguit and intents < max_intents:
        intents += 1
        try:
            resposta = call_llm(prompt)
            json_net = bloc_json(resposta)
            dades = json.loads(json_net)

            # Guardar correcci√≥
            with open(fitxer_path, "w", encoding="utf-8") as f:
                json.dump(dades, f, indent=2, ensure_ascii=False)

            print(f"‚úÖ Cap√≠tol {cap} revisat i corregit.")
            mentre_no_aconseguit = False

        except (ValueError, json.JSONDecodeError) as e:
            print(f"‚ö†Ô∏è Error processant JSON del cap√≠tol {cap}: {e}")
            if intents < max_intents:
                print("üîÑ Reintentant en 2 segons...")
                time.sleep(2)
            else:
                print(f"‚ùå Error definitiu al cap√≠tol {cap} despr√©s de {max_intents} intents.")
                raise SystemExit(f"Aturant execuci√≥ per error a cap√≠tol {cap}.")

print("\nüéØ Tots els cap√≠tols han estat revisats i corregits correctament!")
